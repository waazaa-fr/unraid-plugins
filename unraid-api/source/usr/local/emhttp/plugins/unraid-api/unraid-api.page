Menu="Utilities"
Type="xmenu"
Title="unraid-api"
Icon="gear"
Tag="gear"
Markdown="false"
---
<?
/* Copyright Derek Macias (parts of code from NUT package)
 * Copyright macester (parts of code from NUT package)
 * Copyright gfjardim (parts of code from NUT package)
 * Copyright SimonF (parts of code from NUT package)
 * Copyright Dan Landon (parts of code from Web GUI)
 * Copyright Bergware International (parts of code from Web GUI)
 * Copyright Lime Technology (any and all other parts of Unraid)
 *
 * Copyright waazaa (as author and maintainer of this file)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License 2
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 */
?>

<style>
#api-control-container {
    max-width: 100%;
    margin: 20px auto;
    padding: 20px;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.status {
    font-size: 1.4em;
    font-weight: bold;
    margin-bottom: 20px;
    padding: 10px;
    border-radius: 5px;
    color: #333;
    background: #e0e0e0;
    border: 1px solid #ccc;
}

.commands {
    margin-top: 20px;
    text-align: center;
}

.btn {
    padding: 12px 24px;
    font-size: 1.1em;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s, transform 0.2s;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.btn:hover {
    transform: scale(1.05);
}

.btn-start {
    background-color: #4CAF50; /* Green */
}

.btn-stop {
    background-color: #f44336; /* Red */
}

.btn:disabled,
.btn.disabled {
    cursor: not-allowed;
    opacity: 0.6;
    box-shadow: none;
    background-color: #ccc; /* Couleur grise pour le bouton désactivé */
}

.iframe-container {
    margin-top: 20px;
    border: 1px solid #ddd;
    padding: 5px;
    border-radius: 5px;
    background: #fafafa;
}

iframe {
    width: 100%;
    height: 600px;
    border: none;
}

.tabs {
    display: flex;
    cursor: pointer;
    border-bottom: 2px solid #ccc;
}

.tab-button {
    flex: 1;
    padding: 10px;
    text-align: center;
    background: #f9f9f9;
    border: 1px solid #ddd;
    border-bottom: none;
    font-weight: bold;
    transition: background-color 0.3s;
}

.tab-button.active {
    background: #fff;
    border-top: 2px solid #4CAF50; /* Couleur du bord de l'onglet actif */
}

.tab-content {
    display: none;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background: #fafafa;
    margin-top: 20px;
}

.tab-content.active {
    display: block;
}

.api-test-form {
    margin-bottom: 20px;
}

.api-test-form input {
    padding: 10px;
    font-size: 1em;
    margin-right: 10px;
}

.api-test-form button {
    padding: 10px 20px;
    font-size: 1em;
    background-color: #4CAF50;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

.api-test-form button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
}


.response {
    margin-top: 20px;
    padding: 10px;
    background: #282A36; /* Fond noir */
    color: #e0e0e0; /* Texte gris clair */
    border: 1px solid #444; /* Bordure légèrement plus claire pour un meilleur contraste */
    border-radius: 5px;
    white-space: pre; /* Conserver les espaces et la mise en forme */
    font-family: 'Tahoma', Courier, monospace; /* Police à chasse fixe pour une meilleure lisibilité */
    font-size: 1.5em; /* Augmenter la taille de la police */
    overflow-x: auto; /* Ajouter un défilement horizontal si le texte dépasse la largeur du conteneur */
}

/* Syntax highlighting styles */
.response .key {
    color: #50DD5A; /* Couleur des clés JSON */
}

.response .value {
    color: #50DD5A; /* Couleur des valeurs JSON */
}

.response .string {
    color: #EBF8F2; /* Couleur des chaînes de caractères JSON */
}

.response .number {
    color: #B892F9; /* Couleur des nombres JSON */
}

.response .boolean {
    color: #B892F9; /* Couleur des valeurs booléennes JSON */
}

.response .null {
    color: #EBF8F2; /* Couleur des valeurs null JSON */
}
</style>

<div id="api-control-container">
    <div class="status"></div>
    <div class="commands">
        <button id="control-btn" class="btn">Loading...</button>
    </div>
    <div id="tabs-container" class="tabs">
        <div id="api-test-tab" class="tab-button active">Test API</div>
        <div id="documentation-tab" class="tab-button">Documentation</div>
    </div>
    <div id="api-test-content" class="tab-content active">
        <form id="api-test-form" class="api-test-form">
            <input type="text" id="api-endpoint" placeholder="/path/to/endpoint" required />
            <button type="submit">Test API</button>
        </form>
        <div id="api-response" class="response"></div>
    </div>
    <div id="documentation-content" class="tab-content">
        <!-- L'iframe sera inséré ici via JavaScript -->
    </div>
</div>

<script>



document.addEventListener('DOMContentLoaded', () => {
    let lastState = null;


    function syntaxHighlight(json) {
        if (typeof json !== 'string') {
            json = JSON.stringify(json, null, 2); // Formate le JSON avec une indentation de 2 espaces
        }
        return json
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"(\\u[\dA-Fa-f]{4}|\\[^u]|[^\\"])"/g, function (match) {
                return '<span class="string">' + match + '</span>';
            })
            .replace(/"(.*?)":(?=\s*({|\[|\"|0|1|2|3|4|5|6|7|8|9|true|false|null))/g, function (match, p1) {
                return '<span class="key">"' + p1 + '"</span>:';
            })
            .replace(/(?<=:)(\s*({|\[|\"|0|1|2|3|4|5|6|7|8|9|true|false|null))/g, function (match) {
                return match.replace(/(true|false|null)/g, '<span class="boolean">$1</span>')
                            .replace(/(\d+)/g, '<span class="number">$1</span>');
            });
    }



    function updateStatus() {
        console.log('Fetching API status...');
        fetch('/plugins/unraid-api/include/actions.php?action=isApiRunning')
            .then(response => response.json())
            .then(data => {
                console.log('API status response data:', data);
                if (data.running !== lastState) {
                    lastState = data.running;
                    updateUI(data.running);
                }
                // Réactiver le bouton après mise à jour
                const controlBtn = document.getElementById('control-btn');
                controlBtn.classList.remove('disabled');
                controlBtn.disabled = false;
            })
            .catch(error => {
                console.error('Error fetching API status:', error);
                // Réactiver le bouton en cas d'erreur
                const controlBtn = document.getElementById('control-btn');
                controlBtn.classList.remove('disabled');
                controlBtn.disabled = false;
            });
    }

    function updateUI(isRunning) {
        const statusDiv = document.querySelector('.status');
        const controlBtn = document.getElementById('control-btn');
        const documentationContent = document.getElementById('documentation-content');

        if (isRunning) {
            statusDiv.textContent = "API is running on: http://" + window.location.hostname + ":8889/api";
            statusDiv.style.backgroundColor = '#dff0d8'; // Light green background
            statusDiv.style.color = '#3c763d'; // Dark green text
            controlBtn.textContent = "Stop";
            controlBtn.className = "btn btn-stop";
            documentationContent.innerHTML = '<iframe src="http://' + window.location.hostname + ':8889/docs#/Disks/get_disks_api_disks_get"></iframe>';
            document.getElementById('api-test-content').classList.add('active');
        } else {
            statusDiv.textContent = "API is stopped";
            statusDiv.style.backgroundColor = '#f2dede'; // Light red background
            statusDiv.style.color = '#a94442'; // Dark red text
            controlBtn.textContent = "Start";
            controlBtn.className = "btn btn-start";
            documentationContent.innerHTML = '';
            document.getElementById('api-test-content').classList.remove('active');
        }
    }

    function toggleApi() {
        const controlBtn = document.getElementById('control-btn');
        const action = controlBtn.textContent === "Start" ? "start" : "stop";

        // Désactiver le bouton
        controlBtn.classList.add('disabled');
        controlBtn.disabled = true;

        console.log(`${action.charAt(0).toUpperCase() + action.slice(1)}ing API...`);
        fetch(`/plugins/unraid-api/include/actions.php?action=${action}`)
            .then(response => response.json())
            .then(data => {
                console.log(`${action.charAt(0).toUpperCase() + action.slice(1)} API response data:`, data);
                if (data.success) {
                    setTimeout(updateStatus, 2000);
                } else {
                    console.error(`Failed to ${action} API:`, data.error || data.message);
                    // Réactiver le bouton en cas d'échec
                    controlBtn.classList.remove('disabled');
                    controlBtn.disabled = false;
                }
            })
            .catch(error => {
                console.error(`Error ${action}ing API:`, error);
                // Réactiver le bouton en cas d'erreur
                controlBtn.classList.remove('disabled');
                controlBtn.disabled = false;
            });
    }

    function switchTab(tabId) {
        const tabs = document.querySelectorAll('.tab-button');
        const contents = document.querySelectorAll('.tab-content');

        tabs.forEach(tab => {
            tab.classList.remove('active');
        });
        contents.forEach(content => {
            content.classList.remove('active');
        });

        const activeTab = document.getElementById(tabId + '-tab');
        const activeContent = document.getElementById(tabId);

        if (activeTab) {
            activeTab.classList.add('active');
        }
        if (activeContent) {
            activeContent.classList.add('active');
        }
    }

    document.getElementById('control-btn').addEventListener('click', toggleApi);

    document.getElementById('api-test-tab').addEventListener('click', () => switchTab('api-test-content'));
    document.getElementById('documentation-tab').addEventListener('click', () => switchTab('documentation-content'));

    document.getElementById('api-test-form').addEventListener('submit', (event) => {
        event.preventDefault();
        const endpoint = document.getElementById('api-endpoint').value;
        const responseDiv = document.getElementById('api-response');

        // Désactiver le bouton pendant la soumission
        document.querySelector('#api-test-form button').disabled = true;

        fetch(`http://${window.location.hostname}:8889/api${endpoint}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            responseDiv.innerHTML = syntaxHighlight(data);
        })
        .catch(error => {
            responseDiv.innerHTML = `<span class="error">Error: ${error.message}</span>`;
        })
        .finally(() => {
            // Réactiver le bouton après la soumission
            document.querySelector('#api-test-form button').disabled = false;
        });
    });

    updateStatus();
    setInterval(updateStatus, 10000);
});


</script>
